#!/usr/bin/env bash
# shellcheck disable=2076
usage="latexmk [OPTIONS] FILE"
doc="
This script compiles LaTeX documents similar to latexmk but with custom
features and designed for use with vim. Opens the resulting typeset file in a
PDF viewer then brings the terminal from which this script was invoked back to
the foreground. This is perfect for split-window workflow, with left terminal
on left side of screen and PDF viewer on right side.

Usage

  $usage

Positional arguments

  FILE

Optional arguments

  -h|--help      Print this message.
  -r|--raw       Print raw, unfiltered error messages. By default this script
                 filters and parses the latex engine output so it is much easier
                 to peruse.
  -d|--diff      Run latexdiff on most 'recent' file. Requires files in your
                 directory are otherwise identically named, but end with unique
                 date strings YYYY-MM.tex or YYYY-MM-DD.tex
  -w|--word      Pass -w or --word to automatically convert latex to the Microsoft
                 Word format using pandoc. Useful for colaborating with peers that
                 do not use latex.
  [-l|--line]=N  The line number in the LaTeX document. If the viewer is Skim then
                 we will jump to this line in the PDF document.

Additional features

  * Never generate random extra files again. We query existing files before and
    after compilation, then remove the new ones. This is implemented with an
    EXIT signal trap, and so works if latexmk is interrupted.
  * If you add custom style and theme files to a '~/latex' folder, this script
    will try to copy relevant files to the working directory when they are
    not found in the TeXLive distribution with 'kpsewhich'.
"
# Function for raising error
echoerr() {
  echo "$*" 1>&2
}
raise() {
  echoerr "Usage: $usage"
  echoerr "Error: $*"
  exit 1
}
# Exit trap function
cleanup() {
  local files_rm files_new
  [ -n "$files_old" ] || return 0
  files_new=(*)  # new files
  ext_ignore=(tex bbl pdf docx png jpg jpeg eps gif)
  for file_new in "${files_new[@]}"; do
    [[ " ${files_old[*]} " =~ " $file_new " ]] && continue
    [[ " ${ext_ignore[*]} " =~ " ${file_new##*.} " ]] && continue
    files_rm+=("$file_new")
  done
  rm "${files_rm[@]}"
  echo "Removed files: ${files_rm[*]}"
}

# Commands
[[ "$OSTYPE" =~ darwin* ]] && macos=true || macos=false
which gsed &>/dev/null && sedcmd=gsed || sedcmd=sed
$macos && [ "$sedcmd" == sed ] && \
  raise "GNU sed needed when running this script on OSX. Can be installed from Homebrew with 'brew install gnu-sed'."

# Parse args
trap cleanup EXIT  # remove files on exit or interruption!
shopt -s nullglob  # glob-expand into zero entries
raw=false
latex=pdflatex  # by default use pdflatex
bibtex=bibtex   # for compiling bibliographies
texdiff=false   # get difference pdf?
tex2docx=false  # option
while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)     echo "$doc" && exit 0 ;;
    -r|--raw)      raw=true ;;
    -d|--diff)     texdiff=true ;;
    -w|--word)     tex2docx=true ;;
    -l=*|--line=*) line=${1#*=} ;;
    [^-]*)
      [ -n "$filename" ] && raise "Got multiple filenames."
      filename="$1"
      ;;
    *) raise "Unknown arg $1."
  esac
  shift
done
[ -n "$filename" ] || raise "Must pass filename."
[ -r "$filename" ] || raise "File '$filename' does not exist."

# Get terminal program
if [ -z "$TERM_PROGRAM" ]; then
  terminal=MacVim
elif [[ "$TERM_PROGRAM" =~ 'Apple_Terminal' ]]; then  # or e.g. Apple_Terminal2.0
  terminal=Terminal
else
  terminal=$TERM_PROGRAM
fi

# Get paths
srcs=($HOME/latex $HOME/templates)  # location of LaTeX style files
echo "Filename: $filename"
if [[ "$filename" =~ / ]]; then  # i.e. contains directory specifier
  directory=${filename%/*}  # trim shortest pattern matching <stuff>/*, keep "stuff"
  filename=${filename##*/}  # trim longest pattern matching */<stuff>, keep "stuff"
  cd "$directory" || raise "Directory $directory does not exist."
fi
filestem=${filename%.tex}  # simple
diffname=${filename%.tex}_changes.tex

#-----------------------------------------------------------------------------#
# Get compile options and required packages for file
#-----------------------------------------------------------------------------#
# General utilities
nocomments() {  # ignore comments. TODO: Maybe awk is better?
  [ $# -eq 1 ] || raise "Incorrect usage of nocomments()."
  grep -o '^[^%]*' "$1"
}
inbraces() {  # get content inside braces
  cut -s -d'{' -f2 | cut -s -d'}' -f1 | tr ',' ' '
}

# Search tex file for various dependencies
packages() {  # show package names
  [ $# -eq 1 ] || raise "Incorrect usage of packages()."
  nocomments "$1" | grep -E '\\RequirePackage|\\usepackage' \
    | $sedcmd 's/\[[^][]*\]//g' | $sedcmd '/\[\|\]/d' \
    | $sedcmd 's/AtEndOfClass{//g' | $sedcmd '/newcommand\|#/d' \
    | inbraces | xargs
}
themes() {  # fintd \beamerthemeTHEME and \beamercolorthemeTHEME files
  [ $# -eq 2 ] || raise "Incorrect usage of themes()."
  nocomments "$1" | grep '\\use'"$2" | inbraces \
    | $sedcmd 's/^/beamer'"$2"'/' | xargs
}
bibnames() {  # show bibliography files
  [ $# -eq 1 ] || raise "Incorrect usage of bibnames()."
  nocomments "$1" \
    | $sedcmd -n 's/\\\(bibliography\|nobibliography\|addbibresource\){\(.*\)}/\2/p' \
    | xargs
}
bibstyles() {
  [ $# -eq 1 ] || raise "Incorrect usage of bibstyles()."
  nocomments "$1" | grep '\\bibliographystyle' \
    | inbraces | xargs
}

# Find LaTeX files with kpsewhich, and if not present, copy from custom folder
# Must call kpsewhich with list of files; otherwise extremely slow
texfind() {
  local ext descrip texlive copied names files
  ext=$1
  descrip=$2
  [ $# -le 2 ] && return 1
  names=("${@:3}")
  read -r -a files < <(kpsewhich "${names[@]/%/.${ext}}" | xargs)
  for name in "${names[@]}"; do
    file=${name}.${ext}  # file we want
    if [[ " ${files[*]##*/} " =~ " $file " ]] && ! [[ " ${files[*]} " =~ " ./$file " ]]; then
      # TeX distribution sees file, and it's not in current directory
      texlive+=("$file")
    else
      # Find file in custom templates folder, copy over
      for src in "${srcs[@]}"; do
        if [ -r "${src}/${file}" ]; then
          copied+=("$file")
          cp "${src}/${file}" ./ 2>/dev/null  # ignore 'same file' error
          break
        fi
      done
      [[ " ${copied[*]} " =~ " $file " ]] || raise "${file} not found"
    fi
  done
  [ ${#texlive[@]} -gt 0 ] && echo "$descrip found in TeXLive: ${texlive[*]}"
  [ ${#copied[@]} -gt 0 ] && echo "$descrip copied from ${srcs[*]##*/}: ${copied[*]}"
}

# Change from Skim to Adobe if GIF/animation in file
nocomments "$filename" | grep '\\animategraphics' &>/dev/null \
  && viewer='Adobe Acrobat Reader DC' || viewer='Skim'

# Choose xelatex for tex files that load fontspec, or use modules that load fontspec
nocomments "$filename" | grep -E 'fontspec|xltxtra' &>/dev/null \
  && latex=xelatex

# Choose Lua if beamer present, for speed (required for beamerposter)
nocomments "$filename" | grep 'documentclass.*{beamer}' &>/dev/null \
  && latex=lualatex

# Get actual .bib file or resource; needed for pandoc
# The -n flag prevents printing every single line after running command
read -r -a bibnames < <(bibnames "$filename")
bibliography=false
if [ "${#bibnames[@]}" -gt 0 ]; then
  bibliography=true
  bibnames=("${bibnames[@]%.bib}")  # remove extension, if present
  bibfiles=("${bibnames[@]/%/.bib}")  # add back extension
  echo "Bibliographies: ${bibfiles[*]}"
fi

# First the custom .cls files
read -r -a classes < <(nocomments "$filename" | grep '\\documentclass' | inbraces)
[ ${#classes[@]} -eq 1 ] || raise "Ambiguous document class: '${classes[*]}'."
class=${classes[0]}
texfind cls "Class file" "$class"

# As above but for the RequirePackage lines in the .cls file.
# * Must delete stuff inside [] to account for possible nested {} argument
#   found there; see the regex from here: https://unix.stackexchange.com/a/14840/112647
# * Then we ignore lines with stray brackets; see https://stackoverflow.com/a/17050349/4970632
#   for how to do this with awk; for some reason sed wouldn't work, but gsed did work
# * Finally need to account for newcommand with RequirePackage inside it, which we
#   do by deleting lines containing a '#' character
classfile=$(kpsewhich "$class.cls")
[ -n "$classfile" ] || raise "You should never see this error, already checked for $class.cls existence, check code."
read -r -a required < <(packages "$classfile")
texfind sty 'Class sty dependenc(ies)' "${required[@]}"

# As above but for .sty files
# Will also detect \usepackage{package1,package2} lists
read -r -a packages < <(packages "$filename")
texfind sty 'Preamble sty file(s)' "${packages[@]}"

# As above but for .bst file
read -r -a bibstyle < <(bibstyles "$filename")
texfind bst 'Bibstyle file(s)' "${bibstyle[@]}"

# Next beamer theme
read -r -a themes < <(themes "$filename" 'theme')
texfind sty 'Theme file(s)' "${themes[@]}"

# And beamer color theme
read -r -a colorthemes < <(themes "$filename" 'colortheme')
texfind sty 'Color theme file(s)' "${colorthemes[@]}"

#------------------------------------------------------------------------------#
# Compile the document(s) as many times as necessary and display them
#------------------------------------------------------------------------------#
# Run and filter output of latex comand
# First arg is 1 or 0, indicates whether to always print message
errfilt() {  # show only error messages separated by blank lines
  $sedcmd -E '/^! |^l\./!d' | $sedcmd $'s/^! /\\\n/g'
}
errcat() {  # ignore messages about packages and remove empty lines
  errfilt | grep -A2 '^$' | $sedcmd '/^$/d'
}
run() {
  local res cmd
  res=$("${@:2}" 2>&1)
  # shellcheck disable=2181
  if [ $? -ne 0 ] || [ "$1" -eq 1 ]; then
    if $raw || [[ "${*:2}" =~ "bibtex" ]]; then
      cmd=cat
    else
      cmd=errcat
    fi
    echo "$res" | $cmd | $sedcmd 's/^/  /'
  fi
}

# Open the file(s) on specific page if possible
# See: https://sourceforge.net/p/skim-app/wiki/TeX_and_PDF_Synchronization/#setting-up-vim
# See also: https://stackoverflow.com/a/2058251/4970632
open() {
  ! $macos && echoerr 'Warning: Can only automatically open PDF files on macOS.' && return 1
  local appname fileview
  appname="$1"
  fileview="$2"
  if [ "$appname" == 'Skim' ] && [ -n "$line" ]; then
    echo "Opening \"$fileview\" and jumping to line $line (source $filename)"
    /Applications/Skim.app/Contents/SharedSupport/displayline -r "$line" "$fileview" "$filename"
  else
    echo "Opening \"$fileview\""
    command open -a "$appname" "$fileview" &
  fi
}

# Set the flags for compiling
# * Nonstop mode means no interaction, but keep trying to compile if encounter errors.
# * The shellescape option helps use eps figures that aren't in actual .tex directory.
#   See: https://www.scivision.co/pdflatex-error-epstopdf-output-filename-not-allowed-in-restricted-mode/
flags=('-interaction=nonstopmode' '--shell-escape')
files_old=(*)  # glob expansion to every filename
case $latex in
  xelatex)  stylized=XeLaTeX ;;
  pdflatex) stylized=PDFLaTeX ;;
  lualatex) stylized=LuaLaTeX ;;
  *) raise "Unknown compiler \"$latex\"." ;;
esac
echo 'Running with '"${stylized}..."

# Standard run
# WARNING: To keep exit code from pdflatex, pipe later on
# run 0 $latex $flags "$filestem"
if ! $texdiff && ! $tex2docx; then
  echo 'Generating aux file...'  # maybe just need to generate glossary!
  run 0 "$latex" -draftmode "${flags[@]}" "$filestem"
  if "$bibliography"; then
    echo 'Generating bibliography...'
    run 0 "$bibtex" "$filestem"
    echo 'Incorporating bbl file...'
    run 0 "$latex" -draftmode "${flags[@]}" "$filestem"
  fi
  echo 'Generating PDF...'
  run 1 "$latex" "${flags[@]}" "$filestem"
  [ -r "$filestem.pdf" ] || raise "PDF not produced."
fi

# Difference-LaTeX file, with track changes
if $texdiff; then
  # Get files that come *before* current one in alphanumeric sorting
  prefix=$(sed -E 's/_([0-9]{4}-)?([0-9]{2}-)?[0-9]{2}\.tex//g' <<< "$filename")
  prevnames=("$prefix"*-[0-9][0-9].tex)  # sorted manuscript files (glob is sorted by default)
  for index in "${!prevnames[@]}"; do  # expands to array of indices
    [ "${prevnames[index]}" == "$filename" ] && break
  done
  if [ "$prefix" == "$filename" ]; then
    # Invalid format
    echoerr "Warning: Invalid filename for generating difference file: $filename"
    texdiff=false
  elif [ "$index" -eq 0 ]; then
    # Need at least one file with date before this file
    echoerr "Warning: Failed to find earlier version of current file: $filename"
    texdiff=false
  else
    # Get difference PDF, with changes highlighted
    prevname=${prevnames[index - 1]}
    echo "Running latexdiff on ${filename##*/} minus ${prevname##*/}"
    [ -e "$diffname" ] && rm "$diffname"
    latexdiff "$prevname" "$filename" > "$diffname"
    # Finish the the pdflatex calls necessary to generate tables of contents, bibligrapyy, etc.
    if ! [ -r $diffname ]; then
      echoerr 'Warning: Failed to produce difference file.'
      texdiff=false
    else
      diffstem=${diffname%.tex}
      if $bibliography; then
        $latex -draftmode "${flags[@]}" "$diffstem" &>/dev/null
        $bibtex "$diffstem"  #&>/dev/null
      fi
      # $latex "${flags[@]}" "$diffstem" | errfilt | tail +2
      $latex -draftmode "${flags[@]}" "$diffstem" &>/dev/null
      $latex "${flags[@]}" "$diffstem" | errcat
      if ! [ -r "$diffstem.pdf" ]; then
        echoerr 'Warning: Failed to produce difference PDF.'
        texdiff=false
      fi
    fi
  fi
fi

# Convert to docx with pandoc; keeps figures and formats sections with Word styling
# * For citeproc see: https://github.com/jgm/citeproc
# * For xnos see: https://github.com/tomduck/pandoc-xnos
# Unfortunately neither xnos nor crossref work for numbering equations and figures
if $tex2docx; then
  if ! type pandoc &>/dev/null; then
    echoerr "Warning: Cannot convert to docx because pandoc is not installed. Try brew install pandoc."
  else
    # flags=(-M cref=true --citeproc)
    # flags=(--citeproc --filter=pandoc-crossref)
    flags=(-M cref=true --citeproc)
    flags=(-M cref=true --filter pandoc-xnos)
    flags=(-M cref=true --filter pandoc-crossref --citeproc)
    check=("${required[@]}" "${packages[@]}")
    # flags=()
    # flags=(-M cref=true)
    # flags=(-M cref=true --citeproc --filter=pandoc-crossref)
    [[ " ${check[*]} " =~ natbib ]] && flags+=(--natbib)
    [[ " ${check[*]} " =~ biblatex ]] && flags+=(--biblatex)
    $bibliography && flags+=("${bibfiles[@]/#/--bibliography=}")
    # if $bibliography && ! [[ " ${flags[*]} " =~ ' --natbib ' ]] && ! [[ " ${flags[*]} " =~ ' --biblatex ' ]]; then
    if false; then
      echoerr "Warning: Cannot convert to docx because bibliography package is unknown. Found packages: ${check[*]}"
      # echo "Error: Cannot convert to docx because bibliography package is unknown."
    else
      echo "Running pandoc to convert tex --> docx with flags ${flags[*]}"
      pandoc --output="$filestem.docx" "${flags[@]}" "$filename"
    fi
  fi
fi

! $texdiff && ! $tex2docx && open "$viewer" "$filestem.pdf"  # too jumpy if open everything!
$texdiff && open "$viewer" "$diffstem.pdf"
$tex2docx && open "Pages" "$filestem.docx"
$macos && command open -a "$terminal" &  # bring terminal back into focus
